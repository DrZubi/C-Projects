The following program submission has been recorded:

Student: ozubi
Class: CS159
Section: 13310
Assignment: lab08.c
Submission: 2019-03-20 16:32

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will not be accepted by e-mail.

If this is for a lab assignment, only one member is allowed to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. ozubi@purdue.edu
     5	*  2. mtolkacz@purdue.edu
     6	*  3. elkins15@purdue.edu (delete line if no third partner)
     7	*
     8	*  Lab #: lab08
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The project we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Tuesday, 3:30, SC 289
    17	*
    18	*  Program Description: This program displays the games won for a random\
    19	*  generated game of roulette!
    20	*
    21	***************************************************************************/
    22	#include <math.h>
    23	#include <stdlib.h>
    24	#include <stdio.h>
    25	
    26	int getValue(int);
    27	void printOutput(int,int);
    28	
    29	char getOutcomeColor(int);
    30	char getOutcomeType(int);
    31	char getOutcomePlace(int);
    32	int getOutcomeDozen(int);
    33	
    34	int main(void)
    35	{
    36	//Local Declarations
    37	  int seedValue; //The random generated value created by the seed
    38	  int spins; //The number of spins entered by the user
    39	  int seed; //The seed value entered by the user
    40	
    41	//Statements
    42	  printf("Enter the starting seed -> ");
    43	  scanf("%d",&seed);
    44	  printf("Enter the number of winning spins -> ");
    45	  scanf("%d",&spins);
    46	
    47	//Function Calls
    48	  while (spins > 0)
    49	  {
    50	    seedValue = getValue(seed);
    51	    if (seedValue != 0)
    52	    {
    53	      printOutput(seed, seedValue);
    54	      --spins;
    55	    }
    56	    seed++;
    57	  }
    58	
    59	//Spacing
    60	  printf("\n");
    61	
    62	//Return Statement
    63	  return (0);
    64	} //End main
    65	
    66	/***************************************************************************
    67	*
    68	*  Function Information
    69	*
    70	*  Name of Function: getValue
    71	*
    72	*  Function Return Type: int
    73	*
    74	*  Parameters (list data type, name, and comment one per line):
    75	*    1. int, seed, The seed value entered by the user
    76	*
    77	*  Function Description: This function generates a random value with a given seed.
    78	*
    79	***************************************************************************/
    80	int getValue(int seed)
    81	{
    82	//Local Declarations
    83	  int value; //To store the random value generated by the given seed
    84	
    85	//Statements
    86	  srand(seed);
    87	  value = rand() % 37;
    88	
    89	//Return Staetment
    90	  return (value);
    91	}
    92	
    93	/***************************************************************************
    94	*
    95	*  Function Information
    96	*
    97	*  Name of Function: printOutput
    98	*
    99	*  Function Return Type: void
   100	*
   101	*  Parameters (list data type, name, and comment one per line):
   102	*    1. int, seed, the value of the seed generated from the random number function
   103	*    2. int, seedValue, the value of the seed entered by the user 
   104	*
   105	*  Function Description: This function prints the output of the games won for the user
   106	*
   107	***************************************************************************/
   108	void printOutput(int seed, int seedValue)
   109	{
   110	//Local Declarations
   111	  char outcomeColor; //Outcome of game color (Black, Red)
   112	  char outcomeType; //Outcome of game type (Even, Odd)
   113	  char outcomePlace; //Outcome of game place (Lower, Upper)
   114	  int outcomeDozen; //Outcome of game dozen (First dozen, Second Dozen, third Dozen)
   115	
   116	//Statements
   117	  outcomeColor = getOutcomeColor(seedValue);
   118	  outcomeType = getOutcomeType(seedValue);
   119	  outcomePlace = getOutcomePlace(seedValue);
   120	  outcomeDozen = getOutcomeDozen(seedValue);
   121	
   122	//Output Statements
   123	  printf("\nSeed #: %d", seed);
   124	  printf("\nBall Landing: %d", seedValue);
   125	  printf("\nWinning Games: %c %c %c %d", outcomeColor, outcomeType, outcomePlace, outcomeDozen);
   126	  printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-");
   127	
   128	//Return Statement
   129	  return;
   130	} //End printOutput
   131	
   132	/***************************************************************************
   133	*
   134	*  Function Information
   135	*
   136	*  Name of Function: getOutcomeColor
   137	*
   138	*  Function Return Type: char
   139	*
   140	*  Parameters (list data type, name, and comment one per line):
   141	*    1. int, value, the value of the game won by the user
   142	*
   143	*  Function Description: This function tests for the game colo (red or black)
   144	*
   145	***************************************************************************/
   146	char getOutcomeColor(int value)
   147	{
   148	//Local Declarations
   149	  char outcome; //Outcome of the color of the game
   150	
   151	//Chec for Red
   152	  switch(value)
   153	  {
   154	    case 1:
   155	      outcome = (char) 'R';
   156	      break;
   157	    case 3:
   158	      outcome = (char) 'R';
   159	      break;
   160	    case 5:
   161	      outcome = (char) 'R';
   162	      break;
   163	    case 7:
   164	      outcome = (char) 'R';
   165	      break;
   166	    case 9:
   167	      outcome = (char) 'R';
   168	      break;
   169	    case 12:
   170	      outcome = (char) 'R';
   171	      break;
   172	    case 14:
   173	      outcome = (char) 'R';
   174	      break;
   175	    case 16:
   176	      outcome = (char) 'R';
   177	      break;
   178	    case 18:
   179	      outcome = (char) 'R';
   180	      break;
   181	    case 19:
   182	      outcome = (char) 'R';
   183	      break;
   184	    case 21: 
   185	      outcome = (char) 'R';
   186	      break;
   187	    case 23:
   188	      outcome = (char) 'R';
   189	      break;
   190	    case 25:
   191	      outcome = (char) 'R';
   192	      break;
   193	    case 27:      
   194	      outcome = (char) 'R';
   195	      break;
   196	    case 30:
   197	      outcome = (char) 'R';
   198	      break;
   199	    case 32:
   200	      outcome = (char) 'R';
   201	      break;
   202	    case 34:
   203	      outcome = (char) 'R';
   204	      break;
   205	    case 36:
   206	      outcome = (char) 'R';
   207	      break;
   208	    default:
   209	      outcome = (char) 'B';
   210	  }
   211	//Return Statement      
   212	  return (outcome);
   213	} //End getOutcomeColor
   214	
   215	/***************************************************************************
   216	*
   217	*  Function Information
   218	*
   219	*  Name of Function: getOutcomeType
   220	*
   221	*  Function Return Type: char
   222	*
   223	*  Parameters (list data type, name, and comment one per line):
   224	*    1. int, value, the value of the game won by the user
   225	*
   226	*  Function Description: This program checks if the game was an even or an odd
   227	*  number. 
   228	*
   229	***************************************************************************/
   230	char getOutcomeType(int value)
   231	{
   232	//Local Declarations
   233	  char outcome; //Outcome of the game type (even, odd)
   234	
   235	//Check for even
   236	  if (value % 2 == 0)
   237	  {
   238	    outcome = (char) 'E';
   239	  }
   240	  else
   241	  {
   242	    outcome = (char) 'O';
   243	  }
   244	
   245	//Return Statment
   246	  return(outcome);
   247	} //End getOutcomeType
   248	
   249	/***************************************************************************
   250	*
   251	*  Function Information
   252	*
   253	*  Name of Function: getOutcomePlace
   254	*
   255	*  Function Return Type: char
   256	*
   257	*  Parameters (list data type, name, and comment one per line):
   258	*    1. int, value, the value of the game won by the user
   259	*
   260	*  Function Description: This function checks if the game won is part of the 
   261	*  lower half or upper half.
   262	*
   263	***************************************************************************/
   264	char getOutcomePlace (int value)
   265	{
   266	//Local Declarations
   267	  char outcome; //Outcome of game place (lower, upper)
   268	
   269	//Check for lower half
   270	  if (value <= 18)
   271	  {
   272	    outcome = (char) 'L';
   273	  }
   274	  else
   275	  {
   276	    outcome = (char) 'H';
   277	  }
   278	
   279	//Return Statment
   280	  return(outcome);
   281	} //End getOutcoemPlace
   282	
   283	/***************************************************************************
   284	*
   285	*  Function Information
   286	*
   287	*  Name of Function: getOutcomeDozen
   288	*
   289	*  Function Return Type: int
   290	*
   291	*  Parameters (list data type, name, and comment one per line):
   292	*    1. int, value, the game value won by the user
   293	*
   294	*  Function Description: This function checks which dozen the game won is within.
   295	*
   296	***************************************************************************/
   297	int getOutcomeDozen (int value)
   298	{
   299	//Statement
   300	  value--;
   301	  value /= 12;
   302	  value++;
   303	
   304	//Return Statement
   305	  return(value);
   306	} //End getOutcomeDozen
