The following program submission has been recorded:

Student: ozubi
Class: CS159
Section: 13310
Assignment: lab05.c
Submission: 2019-02-17 15:46

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will not be accepted by e-mail.

If this is for a lab assignment, only one member is allowed to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. ozubi@purdue.edu
     5	*  2. mtolkacz@purdue.edu
     6	*  3. elkins15@purdue.edu (delete line if no third partner)
     7	*
     8	*  Lab #: Lab 05
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The project we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Tuesday, 3:30, SC289
    17	*
    18	*  Program Description: This program computes the generated force, normal force,
    19	*  force of kinetic friction, and acceleration when given a seed by the user.
    20	*
    21	***************************************************************************/
    22	#include <stdio.h>
    23	#include <math.h>
    24	#include <stdlib.h>
    25	#include <fenv.h>
    26	
    27	//Global Declarations
    28	int getSeed(void);
    29	int getRandom(void);
    30	void displayOutput(int, int*, int, double*);
    31	
    32	int main(void)
    33	{
    34	//Local Declarations
    35	  int seed; //Seed given by the user
    36	  int numAttempt = 1; //Initial attempt number
    37	  int range = 90; //Range values
    38	  int randomForce;  //Random force generated by the seed
    39	  double offsetNumber = 0; //Offset Number
    40	
    41	//Input Statements
    42	  seed = getSeed();
    43	  srand(seed);
    44	  randomForce = getRandom();
    45	  
    46	//Range Alternations
    47	  range = range + offsetNumber;
    48	
    49	//Output Statements
    50	  displayOutput(range, &numAttempt, randomForce, &offsetNumber);
    51	  range = 90;
    52	  range = range + trunc(offsetNumber);
    53	  randomForce = getRandom();
    54	  displayOutput(range, &numAttempt, randomForce, &offsetNumber);
    55	  range = 90;
    56	  range = range + trunc(offsetNumber);
    57	  randomForce = getRandom();
    58	  displayOutput(range, &numAttempt, randomForce, &offsetNumber);
    59	  
    60	//Return Statement
    61	  return(0);
    62	}
    63	
    64	/***************************************************************************
    65	*
    66	*  Function Information
    67	*
    68	*  Name of Function: getSeed
    69	*
    70	*  Function Return Type: int
    71	*
    72	*  Parameters (list data type, name, and comment one per line):
    73	*    1. void
    74	*
    75	*  Function Description: This function recieves the seed input from the user
    76	*
    77	***************************************************************************/
    78	int getSeed(void)
    79	{
    80	//Local Declarations
    81	  int inputSeed; //Input seed from the user
    82	
    83	//Statements
    84	  printf("\nEnter seed value for random number generator -> ");
    85	  scanf("%d", &inputSeed);
    86	
    87	//Return Statement
    88	  return(inputSeed);
    89	} //End of getSeed
    90	
    91	/***************************************************************************
    92	*
    93	*  Function Information
    94	*
    95	*  Name of Function: getRandom
    96	*
    97	*  Function Return Type: int
    98	*
    99	*  Parameters (list data type, name, and comment one per line):
   100	*    1. int, seed, the seed value that was inputted by the user
   101	*
   102	*  Function Description: This value generates a random number from the seed
   103	*  given by the user. This is used to compute random force. 
   104	*
   105	***************************************************************************/
   106	int getRandom (void)
   107	{
   108	//Local Declarations
   109	  int randomNumber; //Random Number generated by the seed
   110	
   111	//Statements
   112	  randomNumber = rand() % 11;
   113	
   114	//Return Statement
   115	  return (randomNumber);
   116	} //End of getRandom
   117	
   118	/***************************************************************************
   119	*
   120	*  Function Information
   121	*
   122	*  Name of Function: displayOutput
   123	*
   124	*  Function Return Type: void
   125	*
   126	*  Parameters (list data type, name, and comment one per line):
   127	*    1. int, bottomRange, the bottom range of the attempt
   128	*    2. int*, numAttempt, the attempt that the output is displaying 
   129	*    3. int, inputForce, the force generated by the random varaible
   130	*    4. double*, offsetNumber, the offset number of the previous example to compute range
   131	*
   132	*  Function Description: This function displays the outputs of the generated forces
   133	*
   134	***************************************************************************/
   135	void displayOutput(int bottomRange, int* numAttempt, int inputForce, double* offsetNumber)
   136	{
   137	//Local Declarations
   138	  int generatedForce; //Calculated generated force
   139	  double normalForce; //Calculated normal force
   140	  double frictionKinetic; //Calculated frictionKinetic
   141	  double acceleration;  //Calculated acceleration
   142	
   143	//Calculations
   144	  generatedForce = bottomRange + inputForce;
   145	  normalForce = (20 * 9.8) - (generatedForce * sin(30 * (M_PI / 180)));
   146	  frictionKinetic = 0.5 * normalForce;
   147	  acceleration = ((generatedForce * cos(30 * (M_PI / 180)) - frictionKinetic) / 20);
   148	  *offsetNumber = trunc(*offsetNumber) + (20 * (0.5 - acceleration));
   149	  
   150	  fesetround(FE_UPWARD); //Changing rounding to upward instead of the default setting of rouding for even numbers. 
   151	
   152	//Print Statements
   153	  printf("\nAttempt #: %d Range [%d, %d]", *numAttempt, bottomRange, (bottomRange + 10));
   154	  printf("\nGenerated Force: %d", generatedForce);
   155	  printf("\nNormal Force: %0.1lf", normalForce);
   156	  printf("\nForce of Kinetic Friction: %0.1lf", frictionKinetic);
   157	  printf("\nAcceleration: %0.2lf", acceleration);
   158	  printf("\nOffset for next attempt: %.0lf\n", trunc(*offsetNumber));
   159	  (*numAttempt)++;
   160	
   161	//Return Statement
   162	  return;
   163	}
