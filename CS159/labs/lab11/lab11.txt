The following program submission has been recorded:

Student: ozubi
Class: CS159
Section: 13310
Assignment: lab11.c
Submission: 2019-04-14 18:29

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will not be accepted by e-mail.

If this is for a lab assignment, only one member is allowed to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. ozubi@purdue.edu
     5	*  2. apilasze@purdue.edu
     6	*  3. imesser@purdue.edu (delete line if no third partner)
     7	*
     8	*  Lab #: lab11
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The project we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Tuesday, 3:30, SC 289
    17	*
    18	*  Program Description: This program finds and calculates a whole average number given the data
    19	*  set from the user.
    20	*
    21	***************************************************************************/
    22	#include <math.h>
    23	#include <stdlib.h>
    24	#include <stdio.h>
    25	
    26	//Global Constants
    27	#define SIZE 20
    28	
    29	//Global Function Declarations
    30	int getInput(int[]);
    31	int getDigit(int[], int);
    32	void getDataSet(int[],int);
    33	void getAverage(int[],int, int);
    34	
    35	int main (void)
    36	{
    37	//Local Declarations
    38	  int integers[SIZE]; //Data set to store the user given values
    39	  int count; //Data set size
    40	  int value; //Value added to to the data set to complete average calculation
    41	
    42	//Function Calls
    43	  count = getInput(integers);
    44	  value = getDigit(integers, count);
    45	
    46	//Check if value is within to correct range
    47	  if (value > 0)
    48	  {
    49	    getDataSet(integers, value);
    50	    getAverage(integers, value, count);
    51	  }
    52	
    53	//Return Statement
    54	  return (0);
    55	} //End main
    56	
    57	/***************************************************************************
    58	*
    59	*  Function Information
    60	*
    61	*  Name of Function: getInput
    62	*
    63	*  Function Return Type: int
    64	*
    65	*  Parameters (list data type, name, and comment one per line):
    66	*    1. int arry[], the data set to enter the user values
    67	*
    68	*  Function Description: This function ask and stores the user given data set.
    69	*
    70	***************************************************************************/
    71	int getInput(int arry[])
    72	{
    73	//Local Declarations
    74	  int i; //Count meter for the looping
    75	  int count; //Dataset Size
    76	
    77	//Input Statement
    78	  printf("Enter data set -> ");
    79	
    80	//Storing the user given values into an array
    81	  for (i = 0; i < 20; i++)
    82	  {
    83	    scanf("%d",&arry[i]);
    84	    count += 1;
    85	    if ((arry[i] == -1))
    86	    {
    87	      i = 30;
    88	      count -= 1;
    89	    }
    90	  } 
    91	
    92	//Output Statement
    93	  printf("\nSize of data set: %d\n", count);
    94	
    95	//Return Statement
    96	  return (count);
    97	} //End getInput
    98	
    99	/***************************************************************************
   100	*
   101	*  Function Information
   102	*
   103	*  Name of Function: getDigit
   104	*
   105	*  Function Return Type: int
   106	*
   107	*  Parameters (list data type, name, and comment one per line):
   108	*    1. int arry[], the data set given by the user
   109	*    2. int count, the data set size
   110	*
   111	*  Function Description: This function computes the number that is needed
   112	*  to add to the data set.
   113	*
   114	***************************************************************************/
   115	int getDigit(int arry[], int count)
   116	{
   117	//Local Declarations
   118	  int i; //Count meter for looping
   119	  int total = 0; //Total sum of the data set
   120	  int number = -1; //Number computed to add to data set
   121	
   122	//Finding total
   123	  for (i = 0; i < count; i++)
   124	  {
   125	    total += arry[i];
   126	  }
   127	
   128	//Check for condition that the number is valid and within the range of data set
   129	  for (i = arry[0] + 1; i < arry[count - 1]; i++)
   130	  {
   131	    if ((number == -1) && ((total + i) % (count + 1) == 0))
   132	    {
   133	      number = i;
   134	    }
   135	  }
   136	
   137	//Check if number exists to add to data set
   138	  if (number == -1)
   139	  {
   140	    printf("Digit to add to set: no such value\n");
   141	  }
   142	
   143	  else
   144	  {
   145	    printf("Digit to add to set: %d\n", number);
   146	  }
   147	
   148	//Return Statement
   149	  return (number);
   150	} //End getDigit
   151	
   152	/***************************************************************************
   153	*
   154	*  Function Information
   155	*
   156	*  Name of Function: getDataSet
   157	*
   158	*  Function Return Type: void
   159	*
   160	*  Parameters (list data type, name, and comment one per line):
   161	*    1. int arry[], the dataset given by the user
   162	*    2. int number, the number computed to add to the data set
   163	*
   164	*  Function Description: This function checks for the data index of the number
   165	*  computed to add to the data set.
   166	*
   167	***************************************************************************/
   168	void getDataSet (int arry[], int number)
   169	{
   170	//Local Declarations
   171	  int i = 0; //Count meter for looping
   172	
   173	//Check for data index
   174	  while ((number > arry[i + 1]))
   175	  {
   176	    i++;
   177	  } //End while
   178	
   179	//Output Statement
   180	  printf("Number found between index: %d, %d\n", i, i + 1); 
   181	
   182	//Return Statement
   183	  return;
   184	} //End getDataSet
   185	
   186	/***************************************************************************
   187	*
   188	*  Function Information
   189	*
   190	*  Name of Function: getAverage
   191	*
   192	*  Function Return Type: Void
   193	*
   194	*  Parameters (list data type, name, and comment one per line):
   195	*    1. int arry[], the dataset given by the user
   196	*    2. int number, the number found to add to the data set
   197	*    3. int count, the number of dataset given by the user
   198	*
   199	*  Function Description: This Function computes the average of the dataset
   200	*
   201	***************************************************************************/
   202	void getAverage (int arry[], int number, int count)
   203	{
   204	//Local Declarations
   205	  int i; //Count meter
   206	  int sum = 0; //Sum of data set
   207	  int total; //Total of sum and number to add to data set
   208	  int average; //Computed average
   209	
   210	//Calculation for the sum of the dataset
   211	  for ( i = 0; i < count; i++)
   212	  {
   213	    sum += arry[i];
   214	  }
   215	
   216	//Calculations for the average
   217	  total = sum + number;
   218	  average = total / (count + 1);
   219	
   220	//Output Statement
   221	  printf("Average with new digit: %d / %d = %d.0\n", total, count + 1, average);
   222	
   223	//Return Statement
   224	  return;
   225	} //End getAverage
