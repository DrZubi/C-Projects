The following program submission has been recorded:

Student: ozubi
Class: CS159
Section: 13310
Assignment: lab03.c
Submission: 2019-02-01 16:09

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will not be accepted by e-mail.

If this is for a lab assignment, only one member is allowed to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. ozubi@purdue.edu
     5	*  2. boesk@purdue.edu
     6	*  3. cook297@purdue.edu
     7	*
     8	*  Lab #: Lab03
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The project we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Tuesday, 3:30 PM, SC289
    17	*
    18	*  Program Description: This program calculates and displays both the
    19	*  advertised and actual values for bytes and bits of different model hard drives.
    20	*
    21	***************************************************************************/
    22	#include <stdio.h>
    23	#include <math.h>
    24	
    25	#define TERA 12 //defined value raised to the power of ten to get Tera
    26	#define MEGA 6 //defined value raised to the power of ten to get Mega
    27	#define GIGA 9 //defined value raised to the power of ten to get Giga
    28	#define BIT_BYTE 8 //defined conversion unit from bits to bytes
    29	#define ACTUAL 1024 //defined conversion of kilobytes to bytes 
    30	
    31	int main (void)
    32	{
    33	//Local Declarations
    34	  char prefix; //Prefix of the unit
    35	  char unit; //The unit character (bit or byte)
    36	  double capacity; //Capacity of the hard disk
    37	  double adBits; //Advertised bits
    38	  double adBytes; //Advertised bytes
    39	  double percentage; //Calculated percentage of actual capacity
    40	  double conversion; //The conversion of the advertised capacity to actual capacity
    41	  int factor1; //Factor one for logic to determine the prefix and unit
    42	  int factor2; //Factor two for logic to determine the prefix and unit
    43	  int factor3; //Factor three for logic to determine the prefix and unit
    44	  long adPrefix; //The result of the prefix value that the user entered
    45	  int resultUnit; //The unit value result that the user entered
    46	  long actualPrefix; //Calculation to determine the actual prefix input using 1024 constant
    47	  double binaryBits; //The actual bits for the hard disk
    48	  double binaryBytes; //The actual bytes for the hard disk
    49	
    50	//Input statements
    51	  printf("\nEnter the advertised capacity -> ");
    52	  scanf("%lf", &capacity);
    53	  printf("Enter the given prefix -> ");
    54	  scanf(" %c", &prefix);
    55	  printf("Enter the coding unit -> ");
    56	  scanf(" %c", &unit);
    57	
    58	//Logic to determine if unit is byte or bit
    59	  factor1 = (66 / unit);
    60	  factor2 = (unit / 98);
    61	  resultUnit = factor1 * BIT_BYTE + factor2;
    62	  
    63	//Logic to determine if prefix is Tera, Mega, or Giga
    64	  factor1 = (prefix / 84);
    65	  factor2 = (71 / prefix);
    66	  factor3 = (77 / prefix + 2) % (prefix / 77 + 1);
    67	  adPrefix = factor1 * pow(10, TERA) + factor2 * pow(10, GIGA) + factor3 * pow(10, MEGA);
    68	
    69	//Calculations for advertised bits and advertised bytes
    70	  adBits = adPrefix * resultUnit * capacity; 
    71	  adBytes = adBits / BIT_BYTE;
    72	
    73	//Calculations for actual binary bits and binary bytes
    74	  actualPrefix = factor1 * pow(ACTUAL,TERA / 3) + factor2 * pow(ACTUAL,GIGA / 3) + factor3 * pow(ACTUAL,MEGA / 3);
    75	  binaryBits = actualPrefix * resultUnit * capacity;
    76	  binaryBytes = binaryBits / BIT_BYTE;
    77	
    78	//Calculations for percentage of storage expected and binary unit conversion
    79	  percentage = adBits / binaryBits;
    80	  conversion = capacity * percentage;
    81	  percentage = percentage * 100;
    82	
    83	//Output Statements
    84	  printf("\nDevice as advertised:%11.2f %c%c",capacity,prefix,unit);
    85	  printf("\nAdvertised bits:%16.0lf",adBits);
    86	  printf("\nAdvertised bytes:%15.0lf",adBytes);
    87	  printf("\nBinary unit conversion:%9.2f %c%c",conversion,prefix,unit);
    88	  printf("\nBinary bits:%20.0lf",binaryBits);
    89	  printf("\nBinary bytes:%19.0lf",binaryBytes);
    90	  printf("\nPercentage of storage expected: %0.2lf%%\n",percentage);
    91	
    92	//Return Statment
    93	  return (0);
    94	} //Main
